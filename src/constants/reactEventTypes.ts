export interface EventTypeMapping {
  /** React synthetic event type, e.g. React.MouseEvent */
  readonly reactType: string;
  /** Default HTML element type to use when none can be inferred from JSX tag. */
  readonly defaultElement?: string;
}

export const attributeEventTypeMap: Record<string, EventTypeMapping> = {
  onClick: { reactType: 'React.MouseEvent', defaultElement: 'HTMLElement' },
  onDoubleClick: { reactType: 'React.MouseEvent', defaultElement: 'HTMLElement' },
  onMouseDown: { reactType: 'React.MouseEvent', defaultElement: 'HTMLElement' },
  onMouseUp: { reactType: 'React.MouseEvent', defaultElement: 'HTMLElement' },
  onMouseEnter: { reactType: 'React.MouseEvent', defaultElement: 'HTMLElement' },
  onMouseLeave: { reactType: 'React.MouseEvent', defaultElement: 'HTMLElement' },
  onMouseMove: { reactType: 'React.MouseEvent', defaultElement: 'HTMLElement' },
  onContextMenu: { reactType: 'React.MouseEvent', defaultElement: 'HTMLElement' },
  onChange: { reactType: 'React.ChangeEvent', defaultElement: 'HTMLElement' },
  onInput: { reactType: 'React.FormEvent', defaultElement: 'HTMLElement' },
  onSubmit: { reactType: 'React.FormEvent', defaultElement: 'HTMLFormElement' },
  onReset: { reactType: 'React.FormEvent', defaultElement: 'HTMLFormElement' },
  onFocus: { reactType: 'React.FocusEvent', defaultElement: 'HTMLElement' },
  onBlur: { reactType: 'React.FocusEvent', defaultElement: 'HTMLElement' },
  onKeyDown: { reactType: 'React.KeyboardEvent', defaultElement: 'HTMLElement' },
  onKeyUp: { reactType: 'React.KeyboardEvent', defaultElement: 'HTMLElement' },
  onKeyPress: { reactType: 'React.KeyboardEvent', defaultElement: 'HTMLElement' },
  onTouchStart: { reactType: 'React.TouchEvent', defaultElement: 'HTMLElement' },
  onTouchEnd: { reactType: 'React.TouchEvent', defaultElement: 'HTMLElement' },
  onTouchMove: { reactType: 'React.TouchEvent', defaultElement: 'HTMLElement' },
  onPointerDown: { reactType: 'React.PointerEvent', defaultElement: 'HTMLElement' },
  onPointerUp: { reactType: 'React.PointerEvent', defaultElement: 'HTMLElement' },
  onPointerMove: { reactType: 'React.PointerEvent', defaultElement: 'HTMLElement' },
  onPointerEnter: { reactType: 'React.PointerEvent', defaultElement: 'HTMLElement' },
  onPointerLeave: { reactType: 'React.PointerEvent', defaultElement: 'HTMLElement' },
  onWheel: { reactType: 'React.WheelEvent', defaultElement: 'HTMLElement' },
  onDrag: { reactType: 'React.DragEvent', defaultElement: 'HTMLElement' },
  onDragStart: { reactType: 'React.DragEvent', defaultElement: 'HTMLElement' },
  onDragEnd: { reactType: 'React.DragEvent', defaultElement: 'HTMLElement' },
  onDragEnter: { reactType: 'React.DragEvent', defaultElement: 'HTMLElement' },
  onDragOver: { reactType: 'React.DragEvent', defaultElement: 'HTMLElement' },
  onDragLeave: { reactType: 'React.DragEvent', defaultElement: 'HTMLElement' },
  onDrop: { reactType: 'React.DragEvent', defaultElement: 'HTMLElement' },
  onScroll: { reactType: 'React.UIEvent', defaultElement: 'HTMLElement' },
};

export const htmlElementTypeMap: Record<string, string> = {
  a: 'HTMLAnchorElement',
  area: 'HTMLAreaElement',
  article: 'HTMLElement',
  audio: 'HTMLAudioElement',
  button: 'HTMLButtonElement',
  canvas: 'HTMLCanvasElement',
  div: 'HTMLDivElement',
  form: 'HTMLFormElement',
  iframe: 'HTMLIFrameElement',
  img: 'HTMLImageElement',
  input: 'HTMLInputElement',
  label: 'HTMLLabelElement',
  li: 'HTMLLIElement',
  nav: 'HTMLElement',
  ol: 'HTMLOListElement',
  option: 'HTMLOptionElement',
  p: 'HTMLParagraphElement',
  section: 'HTMLElement',
  select: 'HTMLSelectElement',
  span: 'HTMLSpanElement',
  table: 'HTMLTableElement',
  textarea: 'HTMLTextAreaElement',
  td: 'HTMLTableCellElement',
  th: 'HTMLTableCellElement',
  tr: 'HTMLTableRowElement',
  ul: 'HTMLUListElement',
  video: 'HTMLVideoElement',
};
